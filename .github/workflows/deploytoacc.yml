
name: PromotetoCI

on: 
  push:
    branches: CI
  
jobs:
    deploy-to-org:
        runs-on: ubuntu-latest
        steps:
        # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v2
              
        #  Create promotional Branch     
            - name: 'Creating promotional branch before code promotion'
              shell: bash
              run: |
                  source ./config.sh
                  SOURCE_DIRECTORY=`basename "${SOURCE_REPO_URL}" .git`

                  echo ${{ secrets.CURRENT_BRANCH_NAME }}

                  #cloning the repo.
                  echo git clone ${SOURCE_REPO_URL}
                  git clone ${SOURCE_REPO_URL}

                  #Entering into directory where the repo is cloned.
                  echo cd ${SOURCE_DIRECTORY} 
                  cd ${SOURCE_DIRECTORY}

                  echo git fetch origin
                  git fetch origin

                  destination_exists=$(git ls-remote --heads origin ${{ secrets.DESTINATION_BRANCH_NAME }} | wc -l)
          
                  if [ $destination_exists == 0 ]; then
                  echo "*************  No ${{ secrets.DESTINATION_BRANCH_NAME }} branch exists  *************"
                    exit 1
                  fi

                  current_exists=$(git ls-remote --heads origin ${{ secrets.CURRENT_BRANCH_NAME }} | wc -l)
          
                  if [ $current_exists == 0 ]; then
                  echo "*************  No ${{ secrets.CURRENT_BRANCH_NAME }} branch exists  *************"
                    exit 1
                  fi

                  #Creating Promotional branch from destination branch(like CI, QA or UAT).
                  echo git checkout ${{ secrets.DESTINATION_BRANCH_NAME }}
                  git checkout ${{ secrets.DESTINATION_BRANCH_NAME }}

                  echo git checkout -b Promotional-${{ secrets.DESTINATION_BRANCH_NAME }}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER} ${{ secrets.DESTINATION_BRANCH_NAME }}
                  git checkout -b Promotional-${{ secrets.DESTINATION_BRANCH_NAME }}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER} ${{ secrets.DESTINATION_BRANCH_NAME }}

                  git checkout Promotional-${{ secrets.DESTINATION_BRANCH_NAME }}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}

                  git config --global user.email "${EMAIL_OF_USER_FOR_DESTINATION_REPO}"
                  git config --global user.name "${NAME_OF_USER}"

                  git add .
                  git commit -m "creating promotional branch"
                  git push origin Promotional-${{ secrets.DESTINATION_BRANCH_NAME }}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
                  exec_cmd()
                  {
                    echo "$1"
                    $1
                    return_code=$?
                    if [ $return_code -ne 0 ] ; then
                      echo "ERROR - $1 failed with $return_code"
                      conflicts_exists=0
                      while [ $conflicts_exists -eq 0 ]
                      do
                        echo "grep -lr '<<<<<<<' force-app/ | xargs -d git checkout --theirs"
                        grep -lr '<<<<<<<' force-app/ | xargs -d"\n" git checkout --theirs

                        grep -lrI '<<<<<<<' force-app/
                        conflicts_exists=$?
                      done
                      git status
                      echo git add .
                      git add .
                      echo git commit -m "resolving merge conflicts"
                      git commit -m "resolving merge conflicts"
                      echo "*****Conflict Resolved*****"
                    else
                       echo "No conflict"
                    fi
                   }

                   echo git merge origin/${{ secrets.CURRENT_BRANCH_NAME }}
                   exec_cmd "git merge origin/${{ secrets.CURRENT_BRANCH_NAME }}"

                   #Merging current branch with Promotional branch.
                   #echo git merge origin/${{ secrets.CURRENT_BRANCH_NAME }}
                   #git merge origin/${{ secrets.CURRENT_BRANCH_NAME }}

                   #Pushing Promotional branch.
                   exec_cmd()
                   {
                     echo "$1"
                     $1
                     return_code=$?
                     if [ $return_code -ne 0 ] ; then
      
                       echo "ERROR - $1 failed with $return_code"
                       echo git checkout ${{ secrets.DESTINATION_BRANCH_NAME }}
                       git checkout ${{ secrets.DESTINATION_BRANCH_NAME }}

                       git checkout -d Promotional-${{ secrets.DESTINATION_BRANCH_NAME }}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
                       git push origin --delete Promotional-${{ secrets.DESTINATION_BRANCH_NAME }}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
                       exit 1
                      else
                       echo "Successfully created Promotional-${{ secrets.DESTINATION_BRANCH_NAME }}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER} branch"
                      fi
                    }
                    echo git push origin Promotional-${{ secrets.DESTINATION_BRANCH_NAME }}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
                    exec_cmd "git push origin Promotional-${{ secrets.DESTINATION_BRANCH_NAME }}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}"

            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version
                  
            # Authenticate Org
            - name: 'Authenticate CI Org'
              run: sfdx force:auth:jwt:grant --clientid 3MVG9fe4g9fhX0E7Dy5LJtO93WCIHHA0Lsi9uOW5hG3RVbzSsjSB_HmDLIJnUiN.W4xJjFbtW92uXaGbYImnf --jwtkeyfile server.key --username anig2989@gmail.com --instanceurl https://login.salesforce.com 

              
            # Deploy source to CI Org
            - name: 'Push source to CI org'
              run: sfdx force:source:deploy -c -u anig2989@gmail.com -p force-app/main/default
              
            # Merge to destination branch
            - name: 'Merging to destination branch'
              shell: bash
              run: |
                  source ./config.sh
                  git remote set-url origin ${{ secrets.SOURCE_REPO_URL }}
                  git config --global user.email "${{ secrets.EMAIL_OF_USER_FOR_DESTINATION_REPO }}"
                  git config --global user.name "${{ secrets.NAME_OF_USER }}"
                  git fetch
                  echo git checkout Promotional-${{ secrets.DESTINATION_BRANCH_NAME }}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
                  git checkout Promotional-${{ secrets.DESTINATION_BRANCH_NAME }}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
                  echo git checkout ${{ secrets.DESTINATION_BRANCH_NAME }}
                  git checkout ${{ secrets.DESTINATION_BRANCH_NAME }}
                  echo git merge origin/Promotional-${{ secrets.DESTINATION_BRANCH_NAME }}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
                  git merge origin/Promotional-${{ secrets.DESTINATION_BRANCH_NAME }}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
                  echo git push origin ${{ secrets.DESTINATION_BRANCH_NAME }}
                  git push origin ${{ secrets.DESTINATION_BRANCH_NAME }}
                  
              # Delete promotional branch
            - name: 'Deleting promotional branch'
              run: |
                  source ./config.sh
                  git remote set-url origin ${SOURCE_REPO_URL}
                  echo git checkout ${{ secrets.DESTINATION_BRANCH_NAME }}
                  git checkout ${{ secrets.DESTINATION_BRANCH_NAME }}
                  git push origin --delete Promotional-${{ secrets.DESTINATION_BRANCH_NAME }}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
        

   
