
name: Promote-to-CI

on: 
   
   workflow_dispatch:
     inputs:
      CurrentBranch:
        description: 'Enter the CURRENT BRANCH NAME'
        required: true
        default: 'preci'
        type: choice
        options:
        - preci
        - CI
        - QA
        - UAT
        
      DestinationBranch:
        type: choice
        description: Enter the DESTINATION BRANCH NAME
        required: true
        default: 'CI'
        options: 
        - preci
        - CI
        - QA
        - UAT
jobs:
  log-the-inputs:
       runs-on: ubuntu-latest
       steps:
          - run: |
              echo "Our CURRENT BRANCH NAME is: $CURRENT_BRANCH_NAME"
            env:
             CURRENT_BRANCH_NAME: ${{ inputs.CurrentBranch }}
             DESTINATION_BRANCH_NAME: ${{ inputs.DestinationBranch }}
             
          
  
  deploy-to-org:
        runs-on: ubuntu-latest
        steps:
            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v2
              
            #  Create promotional Branch     
            - name: 'Creating promotional branch before code promotion'
              shell: bash
              run: |
                  #source ./config.sh
                  echo "Creating promotional Branch..."
                  #chmod +x Create_promotional.sh
                  #sh Create_promotional.sh
                  SOURCE_REPO_URL="https://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@github.com/anig2989/Devopstrial.git"
                  NAME_OF_USER="anig2989"
                  EMAIL_OF_USER_FOR_DESTINATION_REPO="anig2989@gmail.com"
                  SOURCE_DIRECTORY=`basename "${SOURCE_REPO_URL}" .git`
                  echo $CURRENT_BRANCH_NAME
                  #cloning the repo.
                  echo git clone ${SOURCE_REPO_URL}
                  git clone ${SOURCE_REPO_URL}
                  #Entering into directory where the repo is cloned.
                  echo cd ${SOURCE_DIRECTORY} 
                  cd ${SOURCE_DIRECTORY}
                  echo git fetch origin
                  git fetch origin
                  destination_exists=$(git ls-remote --heads origin $DESTINATION_BRANCH_NAME | wc -l)
                  if [ $destination_exists == 0 ]; then
                      echo "*************  No $DESTINATION_BRANCH_NAME branch exists  *************"
                      exit 1
                  fi
                  current_exists=$(git ls-remote --heads origin $CURRENT_BRANCH_NAME | wc -l)
                  if [ $current_exists == 0 ]; then
                      echo "*************  No $CURRENT_BRANCH_NAME branch exists  *************"
                      exit 1
                  fi
                  #Creating Promotional branch from destination branch(like CI, QA or UAT).
                  echo git checkout $DESTINATION_BRANCH_NAME
                  git checkout $DESTINATION_BRANCH_NAME
                  echo git checkout -b Promotional-$DESTINATION_BRANCH_NAME-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER} $DESTINATION_BRANCH_NAME
                  git checkout -b Promotional-$DESTINATION_BRANCH_NAME-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER} $DESTINATION_BRANCH_NAME
                  git checkout Promotional-$DESTINATION_BRANCH_NAME-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
                  git remote set-url origin ${SOURCE_REPO_URL}
                  echo git config --global user.email "${{ secrets.EMAIL_OF_USER_FOR_DESTINATION_REPO }}"
                  git config --global user.email "${{ secrets.EMAIL_OF_USER_FOR_DESTINATION_REPO }}"
                  echo git config --global user.name "${{ secrets.NAME_OF_USER }}"
                  git config --global user.name "${{ secrets.NAME_OF_USER }}"
                  git fetch
                  git add .
                  git commit -m "creating promotional branch"
                  git push origin Promotional-$DESTINATION_BRANCH_NAME-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
                  exec_cmd()
                  {
                    echo "$1"
                    $1
                    return_code=$?
                    if [ $return_code -ne 0 ] ; then
                      echo "ERROR - $1 failed with $return_code"
                      conflicts_exists=0
                      while [ $conflicts_exists -eq 0 ]
                      do
                        echo "grep -lr '<<<<<<<' force-app/ | xargs -d git checkout --theirs"
                        grep -lr '<<<<<<<' force-app/ | xargs -d"\n" git checkout --theirs
                        grep -lrI '<<<<<<<' force-app/
                        conflicts_exists=$?
                      done
                      git status
                      echo git add .
                      git add .
                      echo git commit -m "resolving merge conflicts"
                      git commit -m "resolving merge conflicts"
                      echo "*****Conflict Resolved*****"
                    else
                      echo "No conflict"
                    fi
                   }
                   echo git merge origin/$CURRENT_BRANCH_NAME
                   exec_cmd "git merge origin/$CURRENT_BRANCH_NAME"
                   #Pushing Promotional branch.
                   exec_cmd()
                   {
                     echo "$1"
                     $1
                     return_code=$?
                     if [ $return_code -ne 0 ] ; then
                        echo "ERROR - $1 failed with $return_code"
                        echo git checkout $DESTINATION_BRANCH_NAME
                        git checkout $DESTINATION_BRANCH_NAME
                        git checkout -d Promotional-$DESTINATION_BRANCH_NAME-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
                        git push origin --delete Promotional-$DESTINATION_BRANCH_NAME-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
                        exit 1
                     else
                        echo "Successfully created Promotional-$DESTINATION_BRANCH_NAME-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER} branch"
                     fi
                    }
                    echo git push origin Promotional-$DESTINATION_BRANCH_NAME-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
                    exec_cmd "git push origin Promotional-$DESTINATION_BRANCH_NAME-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}"
      
                   
              env:
               CURRENT_BRANCH_NAME: ${{ inputs.CurrentBranch }}
               DESTINATION_BRANCH_NAME: ${{ inputs.DestinationBranch }}
               PASSWORD: ${{ secrets.PASSWORD }}

            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version
            
            # Find delta changes
            - name: 'Finding delta changes'
              run: |
                  source ./config.sh
                  git remote set-url origin ${SOURCE_REPO_URL}
                  git config --global user.email "${{ secrets.EMAIL_OF_USER_FOR_DESTINATION_REPO }}"
                  git config --global user.name "${{ secrets.NAME_OF_USER }}"
                  git fetch
                  echo git checkout Promotional-${DESTINATION_BRANCH_NAME}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
                  git checkout Promotional-${DESTINATION_BRANCH_NAME}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
                  
                  git ls-remote https://github.com/anig2989/Devopstrial.git | \
                  grep refs/heads/${CURRENT_BRANCH_NAME} | cut -f 1 > CURRENT_COMMIT_ID.txt
                  CURRENT_COMMIT_ID=$(<CURRENT_COMMIT_ID.txt)
                  echo CURRENT_COMMIT_ID is $CURRENT_COMMIT_ID
                  #git ls-remote https://github.com/anig2989/Devopstrial.git | \
                  #grep refs/heads/Promotional-${DESTINATION_BRANCH_NAME}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER} | cut -f 1 > PREVIOUS_SUCCESSFUL_COMMIT_ID.txt
                  #PREVIOUS_SUCCESSFUL_COMMIT_ID=$(<PREVIOUS_SUCCESSFUL_COMMIT_ID.txt)
                  PREVIOUS_SUCCESSFUL_COMMIT_ID=$(git rev-parse HEAD)
                  echo PREVIOUS_SUCCESSFUL_COMMIT_ID is $PREVIOUS_SUCCESSFUL_COMMIT_ID
                  echo 'y' | sfdx plugins:install sfpowerkit
                  #sfdx sfpowerkit:project:diff -r $PREVIOUS_SUCCESSFUL_COMMIT_ID -t $CURRENT_COMMIT_ID -d Delta_pkg
                  echo 'y' | sfdx plugins:install sfdx-git-delta
                  mkdir Delta_pkg
                  sfdx sgd:source:delta --to "HEAD" --from "origin/preci" --output Delta_pkg/ --generate-delta

                  
              env:
               CURRENT_BRANCH_NAME: ${{ inputs.CurrentBranch }}
               DESTINATION_BRANCH_NAME: ${{ inputs.DestinationBranch }}
               PASSWORD: ${{ secrets.PASSWORD }}
       
            # Authenticate Org
            - name: 'Authenticate CI Org'
              run: sfdx force:auth:jwt:grant --clientid 3MVG9fe4g9fhX0E7Dy5LJtO93WCIHHA0Lsi9uOW5hG3RVbzSsjSB_HmDLIJnUiN.W4xJjFbtW92uXaGbYImnf --jwtkeyfile server.key --username anig2989@gmail.com --instanceurl https://login.salesforce.com 

              
            # Deploy source to CI Org
            - name: 'Push source to CI org'
              run: |
                    sfdx force:source:deploy -c -u anig2989@gmail.com -p Delta_pkg/force-app/main/default
                    
            # Merge to destination branch
            - name: 'Merging to destination branch'
              shell: bash
              run: |
                  source ./config.sh
                  git remote set-url origin ${SOURCE_REPO_URL}
                  git config --global user.email "${{ secrets.EMAIL_OF_USER_FOR_DESTINATION_REPO }}"
                  git config --global user.name "${{ secrets.NAME_OF_USER }}"
                  git fetch
                  echo git checkout Promotional-${DESTINATION_BRANCH_NAME}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
                  git checkout Promotional-${DESTINATION_BRANCH_NAME}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
                  echo git checkout ${DESTINATION_BRANCH_NAME}
                  git checkout ${DESTINATION_BRANCH_NAME}
                  echo git merge origin/Promotional-${DESTINATION_BRANCH_NAME}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
                  git merge origin/Promotional-${DESTINATION_BRANCH_NAME}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
                  echo git push origin ${DESTINATION_BRANCH_NAME}
                  git push origin ${DESTINATION_BRANCH_NAME}
                  
              env:
               CURRENT_BRANCH_NAME: ${{ inputs.CurrentBranch }}
               DESTINATION_BRANCH_NAME: ${{ inputs.DestinationBranch }}
                  
              # Delete promotional branch
            - name: 'Deleting promotional branch'
              run: |
                  source ./config.sh
                  git remote set-url origin ${SOURCE_REPO_URL}
                  echo git checkout ${DESTINATION_BRANCH_NAME}
                  git checkout ${DESTINATION_BRANCH_NAME}
                  git push origin --delete Promotional-${DESTINATION_BRANCH_NAME}-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
        
              env:
               CURRENT_BRANCH_NAME: ${{ inputs.CurrentBranch }}
               DESTINATION_BRANCH_NAME: ${{ inputs.DestinationBranch }}
   
